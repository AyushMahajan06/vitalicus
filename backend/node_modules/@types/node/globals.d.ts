import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';
import { renderPrescriptionPDF, type PrescriptionPayload } from './services/pdf';

const app = express();

// CORS
app.use(cors({ origin: process.env.FRONTEND_ORIGIN?.split(',') || true }));
app.use(express.json());

// Serve generated PDFs from /files/<id>.pdf
const filesDir = path.resolve(__dirname, '..', 'generated');
app.use('/files', express.static(filesDir, { maxAge: '5m' }));

// Healthcheck
app.get('/api/health', (_req, res) => res.json({ ok: true, service: 'backend' }));

// Create prescription → generate PDF → return URL
app.post('/api/prescriptions', async (req, res) => {
  try {
    const {
      patientName,
      drug1Name,
      drug1Timing,
      drug2Name,
      drug2Timing,
      notes,
    } = req.body as PrescriptionPayload;

    // minimal validation for required fields
    if (!patientName?.trim() || !drug1Name?.trim() || !drug1Timing?.trim()) {
      return res.status(400).json({
        error: 'Missing required fields: patientName, drug1Name, drug1Timing',
      });
    }

    const id = uuidv4();
    const outPath = path.join(filesDir, `${id}.pdf`);

    await renderPrescriptionPDF(
      {
        patientName: patientName.trim(),
        drug1Name: drug1Name.trim(),
        drug1Timing: drug1Timing.trim(),
        drug2Name: drug2Name?.trim() || undefined,
        drug2Timing: drug2Timing?.trim() || undefined,
        notes: notes?.trim() || undefined,
      },
      outPath
    );

    // Build an absolute URL that the frontend can open
    const base =
      process.env.PUBLIC_BASE_URL || `http://localhost:${process.env.PORT || 8080}`;
    const url = `${base}/files/${id}.pdf`;

    res.json({ id, url });
  } catch (e: any) {
    console.error(e);
    res.status(500).json({ error: 'Failed to generate prescription' });
  }
});

const port = process.env.PORT || 8080;
app.listen(port, () => console.log(`API listening on :${port}`));
